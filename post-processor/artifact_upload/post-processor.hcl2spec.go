// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package artifactUpload

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	ArtifactoryToken  *string `mapstructure:"artifactory_token" required:"true" cty:"artifactory_token" hcl:"artifactory_token"`
	ArtifactoryServer *string `mapstructure:"artifactory_server" required:"true" cty:"artifactory_server" hcl:"artifactory_server"`
	SourcePath        *string `mapstructure:"source_path" required:"true" cty:"source_path" hcl:"source_path"`
	TargetPath        *string `mapstructure:"target_path" required:"false" cty:"target_path" hcl:"target_path"`
	ImageType         *string `mapstructure:"image_type" required:"true" cty:"image_type" hcl:"image_type"`
	ImageName         *string `mapstructure:"image_name" required:"true" cty:"image_name" hcl:"image_name"`
	ExistingUriTarget *string `mapstructure:"existing_uri_target" required:"false" cty:"existing_uri_target" hcl:"existing_uri_target"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"artifactory_token":   &hcldec.AttrSpec{Name: "artifactory_token", Type: cty.String, Required: false},
		"artifactory_server":  &hcldec.AttrSpec{Name: "artifactory_server", Type: cty.String, Required: false},
		"source_path":         &hcldec.AttrSpec{Name: "source_path", Type: cty.String, Required: false},
		"target_path":         &hcldec.AttrSpec{Name: "target_path", Type: cty.String, Required: false},
		"image_type":          &hcldec.AttrSpec{Name: "image_type", Type: cty.String, Required: false},
		"image_name":          &hcldec.AttrSpec{Name: "image_name", Type: cty.String, Required: false},
		"existing_uri_target": &hcldec.AttrSpec{Name: "existing_uri_target", Type: cty.String, Required: false},
	}
	return s
}
