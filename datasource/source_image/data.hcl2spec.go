// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package artifactImage

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	AritfactoryToken     *string           `mapstructure:"artifactory_token" required:"true" cty:"artifactory_token" hcl:"artifactory_token"`
	ArtifactoryServer    *string           `mapstructure:"artifactory_server" required:"true" cty:"artifactory_server" hcl:"artifactory_server"`
	ArtifactoryOutputDir *string           `mapstructure:"artifactory_output_dir" required:"false" cty:"artifactory_output_dir" hcl:"artifactory_output_dir"`
	ArtifactoryLogging   *string           `mapstructure:"artifactory_logging" required:"false" cty:"artifactory_logging" hcl:"artifactory_logging"`
	ArtifactName         *string           `mapstructure:"artifact_name" required:"true" cty:"artifact_name" hcl:"artifact_name"`
	ArtifactFileType     *string           `mapstructure:"file_type" required:"true" cty:"file_type" hcl:"file_type"`
	ArtifactChannel      *string           `mapstructure:"channel" required:"false" cty:"channel" hcl:"channel"`
	ArtifactFilter       map[string]string `mapstructure:"filter" required:"false" cty:"filter" hcl:"filter"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"artifactory_token":      &hcldec.AttrSpec{Name: "artifactory_token", Type: cty.String, Required: false},
		"artifactory_server":     &hcldec.AttrSpec{Name: "artifactory_server", Type: cty.String, Required: false},
		"artifactory_output_dir": &hcldec.AttrSpec{Name: "artifactory_output_dir", Type: cty.String, Required: false},
		"artifactory_logging":    &hcldec.AttrSpec{Name: "artifactory_logging", Type: cty.String, Required: false},
		"artifact_name":          &hcldec.AttrSpec{Name: "artifact_name", Type: cty.String, Required: false},
		"file_type":              &hcldec.AttrSpec{Name: "file_type", Type: cty.String, Required: false},
		"channel":                &hcldec.AttrSpec{Name: "channel", Type: cty.String, Required: false},
		"filter":                 &hcldec.AttrSpec{Name: "filter", Type: cty.Map(cty.String), Required: false},
	}
	return s
}

// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDatasourceOutput struct {
	Name        *string `mapstructure:"name" cty:"name" hcl:"name"`
	Created     *string `mapstructure:"creation_date" cty:"creation_date" hcl:"creation_date"`
	ArtifactUri *string `mapstructure:"artifcat_uri" cty:"artifcat_uri" hcl:"artifcat_uri"`
	DownloadUri *string `mapstructure:"download_uri" cty:"download_uri" hcl:"download_uri"`
}

// FlatMapstructure returns a new FlatDatasourceOutput.
// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DatasourceOutput) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDatasourceOutput)
}

// HCL2Spec returns the hcl spec of a DatasourceOutput.
// This spec is used by HCL to read the fields of DatasourceOutput.
// The decoded values from this spec will then be applied to a FlatDatasourceOutput.
func (*FlatDatasourceOutput) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"name":          &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"creation_date": &hcldec.AttrSpec{Name: "creation_date", Type: cty.String, Required: false},
		"artifcat_uri":  &hcldec.AttrSpec{Name: "artifcat_uri", Type: cty.String, Required: false},
		"download_uri":  &hcldec.AttrSpec{Name: "download_uri", Type: cty.String, Required: false},
	}
	return s
}
